#!/usr/bin/env python
#
# Battray 1.4 by Martin Tournoij <martin@arp242.net>
# http://code.google.com/p/battray/
#
# Feel free to use, modify, and redistribute as you see fit. There are no
# restrictions.
#
########## With additional contributions from:
# Andy Mikhaylenko <andy@neithere.net>
#   Linux platform
#
# Keith W. Blackwell a.k.a. zimbot from freesound.org
#   alert.wav, http://www.freesound.org/samplesViewSingle.php?id=122989
#   License: http://creativecommons.org/licenses/sampling+/1.0/
#
########## Supported platforms:
# FreeBSD, OpenBSD, Linux
#
# Adding a new platform is usually very easy!
# For information, take a look at:
# http://code.google.com/p/battray/wiki/Manual#Platform
#

import getopt
import os
import subprocess
import sys
import traceback

try:
	import thread
except ImportError:
	import dummy_thread as thread

# py-gtk2 2.10 or higher required
try:
	import gobject
	import gtk
except ImportError:
	print >> sys.stderr, 'Battray: Error, PyGTK 2.10 or higher is required, unable to find PyGTK.'
	print >> sys.stderr, 'Battray: PyGTK homepage http://www.pygtk.org/'
	sys.exit(1)

# Only works on Linux and FreeBSD
try:
	import ossaudiodev
except ImportError:
	print 'Unable to load ossaudiodev module'
	print sys.exc_info()[1]
	sys.exit(1)

try:
	import wave
except ImportError:
	print 'Unable to load wave module'
	print sys.exc_info()[1]
	sys.exit(1)


def Usage():
	"""
	Print help/usage info.
	Note: We do not exit
	"""

	print "  Usage: %s [-hv] [-p platform] [-d datadir] [-f configfile]" % os.path.basename(sys.argv[0])
	print "  [-i pol_interval]"
	print ""
	print "\t-h, --help\tPrint this help message and exit."
	print "\t-v, --version\tPrint version and exit."
	print "\t-d, --datadir\tDatadir to use (For icons)."
	print "\t-f, --file\tConfiguration file to use."
	print "\t-i, --interval\tPoll the status every n seconds."
	print "\t-p, --platform\tSpecify a specific platform file/"
	print "\t              \tWill be imported, so make sure it's in sys.path"
	print ""
	print "  Please see battray(1) for more documentation."

_config = {}
_p = None
_usecolor = True

def Init():
	"""
	Try to find and import configuration file and parse commandline arguments
	"""

	# Make sure we're using the right PyGTK version
	ver = float('%i.%i' % (gtk.ver[0], gtk.ver[1]))
	if ver <= 2.10:
		print >> sys.stderr, 'Battray: Error, PyGTK 2.10 or higher is required, found version %.2f' % ver
		print >> sys.stderr, 'Battray: PyGTK homepage http://www.pygtk.org/'
		sys.exit(1)
	
	# Parse commandline arguments.
	try:
		options, arguments = getopt.getopt(sys.argv[1:], 'hvd:f:p:i:',
			['help', 'version', 'datadir=', 'file=', 'platform=', 'interval='])
	except getopt.GetoptError:
		Usage()
		print >> sys.stderr, "\nBattray: Error,", sys.exc_info()[1]
		sys.exit(1)

	optionfile = ''
	platform = sys.platform[:-1]
	cpollinterval = None
	cdatadir = None
	cplatform = None

	for opt, arg in options:
		if opt == '-h' or opt == '--help':
			Usage()
			sys.exit(0)
		elif opt == '-v' or opt == '--version':
			print 'Battray 1.4'
			print 'Martin Tournoij <martin@arp242.net>'
			print 'http://code.google.com/p/battray/'
			sys.exit(0)
		elif opt == '-f' or opt == '--file':
			if not os.path.exists(arg):
				print >> sys.stderr, "Battray: Configuration file `%s' doesn't exists." % arg
				sys.exit(1)
			optionfile = arg
		elif opt == '-d' or opt == '--datadir':
			cdatadir = arg
		elif opt == '-i' or opt == '--interval':
			cpollinterval = arg
		elif opt == '-p' or opt == '--platform':
			cplatform = arg

	_config = LoadConfig(optionfile, True)

	# Override values from config file with commandline arguments
	if cdatadir is not None:
		_config['datadir'] = cdatadir

	if cpollinterval is not None:
		_config['pollinterval'] = int(cpollinterval)

	if cplatform is not None:
		platform = cplatform

	_p = LoadPlatform(platform)

	return _config, _p

def LoadConfig(optionfile='', full=False):
	"""
	Try to load the configuration file
	"""

	global _config

	configlocation = (
		os.path.expanduser(optionfile),
		os.path.expanduser('~/.battray/battrayrc.py'),
		os.path.expanduser('~/.battrayrc.py'),
		'/usr/local/etc/battrayrc.py',
		'/usr/local/etc/battray/battrayrc.py',
		'/etc/battrayrc.py',
		'/etc/battray/battrayrc.py',
		'/usr/local/share/battray/battrayrc.py',
		'/usr/local/share/examples/battray/battrayrc.py',
		'/usr/share/battray/battrayrc.py',
		'./battrayrc.py'
	)

	# Try to find configuration file
	config = None
	for f in configlocation:
		if os.path.exists(f):
			config = f
			sys.path.append(os.path.dirname(f))
			break

	# No config file, use the default
	if config is None:
		if full:
			print 'Battray: Using default config file.'
		for f in sys.path:
			if os.path.exists(f + '/battray/battrayrc_default.py'):
				config = f + '/battray/battrayrc_default.py'
				break;

	# exec config file
	try:
		exec open(config, 'r').read()
		_config['icon'] = icon
		_config['color'] = color
		_config['blink'] = blink
		_config['play'] = play
		_config['run'] = run

		if full:
			_config['file'] = config
			_config['datadir'] = sys.prefix + '/share/battray'
			_config['pollinterval'] = pollinterval

	except:
		print >> sys.stderr, "Battray: Unable to load configuration file `%s'" % config
		print >> sys.stderr, sys.exc_info()[1]
		print traceback.print_tb(sys.exc_info()[2])
		sys.exit(1)

	# Just in case someone added quotes
	_config['pollinterval'] = int(_config['pollinterval'])

	# Sanity checking
	if not os.path.exists(_config['datadir']):
		print >> sys.stderr, "Battray: Datadir `%s' doesn't exist." % _config['datadir']
		sys.exit(1)

	if full:
		return _config

def LoadPlatform(platform):
	"""
	Load/import platform information
	"""

	try:
		_p = __import__('battray.platforms.' + os.path.basename(platform), fromlist=[platform])
	except ImportError:
		print >> sys.stderr, "Battray: Unable to get information for platform `%s'\n%s" % (
			platform, sys.exc_info()[1])
		sys.exit(1)

	ReloadPlatform()
	return _p

def CheckBatt(tray, data = None):
	"""
	Check battery status & update tray.
	"""

	global _config

	LoadConfig()
	ReloadPlatform()

	try:
		SetIcon(tray, _p.ac, _p.charging, _p.percent, _p.lifetime, _p.tooltip)
	except AttributeError:
		SetIcon(tray, _p.ac, _p.charging, _p.percent, _p.lifetime)
	
	return True # Keep this!

def CheckBattFromMenu(widget, tray):
	CheckBatt(tray)

def SetIcon(tray, ac, charging, percent, lifetime, tooltip=''):
	"""
	Set icon & tooltip.
	"""
	global _usecolor

	text = []

	# Make some pretty tooltip text and determine icon.
	if ac == None:
		text.append('Cannot get battery status.\n')
	elif ac:
		text.append('Connected to AC power.\n')
	elif not ac:
		text.append('Running on battery.\n')
	
	if percent == 255:
		text.append('Cannot get battery percentage status.\n')
	else:
		text.append('%i percent battery power remaining.\n' % percent)
	
	if charging or ac:
		pass
	elif lifetime == 255:
		text.append('Unknown lifetime remaining.\n')
	else:
		t = lifetime / 60.0
		text.append('Approximately %.1f hours remaining.\n' % t)

	if charging == None:
		# Just skip
		pass
	elif charging == True:
		text.append('Charging battery.')
	else:
		text.append('Not charging battery.')

	icon = gtk.gdk.pixbuf_new_from_file('%s/icons/%s' % (_config['datadir'],
		_config['icon']))

	# Fill battery icon with background to indicate status. Skip everything
	# that's black to preserve the plus sign.
	if not ac or charging:
		fill = gtk.gdk.pixbuf_new_from_file('%s/icons/%s.png' % (
			_config['datadir'], _config['color']))

		# May not always work, this feature requires py-numpy, which is disabled
		# by default on FreeBSD because it pulls in gcc4.4
		try:
			pixelArray = icon.get_pixels_array()
		except RuntimeError:
			if _usecolor:
				_usecolor = False
				print >> sys.stderr, 'Battray: py-gtk2 needs to be compiled with numpy',
				print >> sys.stderr, 'to change the color of the status icon'

		if _usecolor:
			# 24 pixels wide
			fillamount = int(round(percent / 4))
		
			col = 2
			while col <= fillamount + 2:
				row = 10
				while row <= 21:
					# Black pixel
					if pixelArray[row][col][3] == 255:
						row += 1
						continue

					#print icon, col, row
					fill.copy_area(0, 0, 1, 1, icon, col, row)
					row += 1
				col += 1

	# Warn the user if battery is low
	if _config.get('blink'):
		tray.set_blinking(True)
	else:
		tray.set_blinking(False)

	try:
		text += '\n' + _p.tooltip
	except AttributeError:
		pass

	# We are ready to set the icon & tooltip
	tray.set_from_pixbuf(icon)
	s = ''
	s = s.join(text)
	tray.set_tooltip(s)

def PopupMenu(widget, button, lifetime, data = None):
	if button == 3:
		if data:
			data.show_all()
			data.popup(None, None, None, 3, lifetime)

def Quit(widget, data = None):
	if data:
		data.set_visible(False)
	gtk.main_quit()
 
def AboutDialog(widget, data = None):
	about = gtk.AboutDialog()
	about.set_authors(['Martin Tournoij <martin@arp242.net>', 'Andy Mikhaylenko <andy@neithere.net>', 'Keith W. Blackwell'])
	about.set_version('1.4')
	about.set_website('http://code.google.com/p/battray/')
	about.set_comments('Simple program that displays a tray icon to inform you on your notebooks battery status.')
	about.run()
	about.destroy()

def ReloadPlatform():
	"""
	Reload platform file, set switchedto* variables
	"""

	if _p:
		ac = _p.ac
		reload(_p)

		if not _p.ac and ac:
			_p.switchedtobattery = True
		else:
			_p.switchedtobattery = False

		if _p.ac and not ac:
			_p.switchedtoac = True
		else:
			_p.switchedtoac = False

def run(cmd):
	"""
	Run cmd in shell
	NOTE: We not *NOT* do any escaping. We assume cmd is already sane.
	"""

	try:
		print cmd
		o = subprocess.Popen([cmd], stdout=subprocess.PIPE, shell=True).communicate()[0]
	except OSError:
		print >> sys.stderr, "Battray: Something went wrong executing `%s'\n%s" % (
			cmd, sys.exc_info()[1])

def play(sound):
	"""
	Play sound, which is a wavefile either relative to datadir or an absolute
	path.
	We use playway.py to play the sound.
	"""

	if not _config:
		return

	if os.path.exists(sound.strip()):
		sound = sound.strip()
	else:
		sound = '%s/%s' % (_config['datadir'], sound.strip())

	thread.start_new_thread(PlaySound, (sound,))

def charging():
	if _p:
		return _p.charging

def ac():
	if _p:
		return _p.ac

def switchedto():
	if _p:
		if _p.switchedtobattery:
			return 'battery'
		elif _p.switchedtoac:
			return 'ac'
		else:
			return False
	else:
		return False

def lifetime():
	if _p:
		return _p.lifetime
	else:
		return 255

def percent():
	if _p:
		return _p.percent
	else:
		return 255

def PlaySound(soundfile):
	"""
	Play a sound.
	"""

	s = wave.open(soundfile, 'rb')
	(nc, sw, fr, nf, comptype, compname) = s.getparams()

	try:
		dsp = ossaudiodev.open('/dev/dsp', 'w')
	except IOError:
		print 'Unable to open /dev/dsp'
		print sys.exc_info()[1]
		sys.exit(1)

	try:
		from ossaudiodev import AFMT_S16_NE
	except ImportError:
		if byteorder == 'little':
			AFMT_S16_NE = ossaudiodev.AFMT_S16_LE
		else:
			AFMT_S16_NE = ossaudiodev.AFMT_S16_BE

	dsp.setparameters(AFMT_S16_NE, nc, fr)
	data = s.readframes(nf)
	s.close()
	dsp.write(data)
	dsp.close()

	thread.exit()

if __name__ == '__main__':
	try:
		_config, _p = Init()

		# Tray icon
		tray = gtk.StatusIcon()
		tray.connect('activate', CheckBatt)
		tray.set_visible(True)
		CheckBatt(tray)

		# The popup menu
		menu = gtk.Menu()
		
		item = gtk.MenuItem('Refresh status')
		item.connect('activate', CheckBattFromMenu, tray)
		menu.append(item)

		item = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
		item.connect('activate', AboutDialog)
		menu.append(item)

		item = gtk.ImageMenuItem(gtk.STOCK_QUIT)
		item.connect('activate', Quit, tray)
		menu.append(item)

		tray.connect('popup-menu', PopupMenu, menu)
		gobject.timeout_add(_config['pollinterval'] * 1000, CheckBatt, tray)

		gtk.main()
	except KeyboardInterrupt:
		print ''
		sys.exit(0)
